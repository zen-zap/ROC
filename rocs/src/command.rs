//! src/command.rs
//!
//! Documentation generated by Github Copilot
//!
//! Actor model command interface for the async database engine.
//!
//! Each command is an operation that can be sent from a client handler to a database actor.
//! Commands carry a reply channel (`respond_to`) to ensure responses are routed
//! to the correct client or subsystem. This is the foundation for robust, concurrent, and scalable
//! async processing in the system.

use tokio::sync::oneshot;

pub type UserId = String;

/// The set of commands that can be sent to the database actor system.
///
/// Each variant represents an operation that can be performed on the database,
/// with a `respond_to` channel for sending the result or acknowledgment back to the requester.
///
/// This enum is central to the actor model architecture, ensuring all communication
/// is explicit and type-safe.
#[derive(Debug)]
pub enum Command {
    /// Ping the server to check if it is alive and responsive.
    ///
    /// # Response
    /// - Sends a simple acknowledgment via the `oneshot::Sender<()>`.
    Ping {
        user_id: UserId,
        /// Channel to send the acknowledgment.
        respond_to: oneshot::Sender<String>,
    },

    /// HI command: Start or resume a user session.
    /// - If `user_id` is None, server creates a new session/id.
    /// - If `user_id` is Some, server checks validity and resumes or issues new id if needed.
    /// 
    /// Responds with the assigned/confirmed user id as String.
    Hi {
        user_id: Option<UserId>,
        respond_to: oneshot::Sender<UserId>,
    },

    /// Set a key-value pair in the database.
    ///
    /// # Arguments
    /// - `key`: The key to insert or update.
    /// - `value`: The value to associate with the key.
    ///
    /// # Response
    /// - Sends `Ok(())` if successful, or `Err(String)` with an error message.
    Set {
        user_id: UserId,
        key: String,
        value: usize,
        respond_to: oneshot::Sender<Result<(), String>>,
    },

    /// Get the value associated with a given key.
    ///
    /// # Arguments
    /// - `key`: The key to look up.
    ///
    /// # Response
    /// - Sends `Ok(Some(value))` if found, `Ok(None)` if not found, or `Err(String)` on error.
    Get {
        user_id: UserId,
        key: String,
        respond_to: oneshot::Sender<Result<Option<usize>, String>>,
    },

    /// Delete a key-value pair from the database.
    ///
    /// # Arguments
    /// - `key`: The key to remove.
    ///
    /// # Response
    /// - Sends `Ok(())` if deleted, or `Err(String)` on error.
    Del {
        user_id: UserId,
        key: String,
        respond_to: oneshot::Sender<Result<(), String>>,
    },

    /// Update the value for an existing key.
    ///
    /// # Arguments
    /// - `key`: The key to update.
    /// - `value`: The new value to associate with the key.
    ///
    /// # Response
    /// - Sends `Ok(())` if updated, or `Err(String)` on failure.
    Update {
        user_id: UserId,
        key: String,
        value: usize,
        respond_to: oneshot::Sender<Result<(), String>>,
    },

    /// Fetch all key-value pairs within a range of keys (inclusive).
    ///
    /// # Arguments
    /// - `start`: The start key (inclusive).
    /// - `end`: The end key (inclusive).
    ///
    /// # Response
    /// - Sends `Ok(Vec<(key, value)>)` if successful, or `Err(String)` on error.
    Range {
        user_id: UserId,
        start: String,
        end: String,
        respond_to: oneshot::Sender<Result<Vec<((String, String), usize)>, String>>,
    },

    /// List all key-value pairs in the database.
    ///
    /// # Response
    /// - Sends `Ok(Vec<(key, value)>)` if successful, or `Err(String)` on error.
    List {
        user_id: UserId,
        respond_to: oneshot::Sender<Result<Vec<((String, String), usize)>, String>>,
    },

    // Admin

    /// Initiate a graceful shutdown of the database server.
    ///
    /// # Response
    /// - Sends `Ok(())` if shutdown is initiated, or `Err(String)` on error.
    Shutdown {
        respond_to: oneshot::Sender<Result<(), String>>,
    },

    /// Simulate or trigger a crash for testing recovery logic.
    ///
    /// # Response
    /// - Sends `Ok(())` if crash is triggered, or `Err(String)` on error.
    Crash {
        respond_to: oneshot::Sender<Result<(), String>>,
    },

    /// Trigger a snapshot of the current database state.
    ///
    /// # Response
    /// - Sends `Ok(())` if snapshot is successful, or `Err(String)` on error.
    Snapshot {
        respond_to: oneshot::Sender<Result<(), String>>,
    },

    /// Clear the write-ahead log (WAL).
    ///
    /// # Response
    /// - Sends `Ok(())` if WAL is cleared, or `Err(String)` on error.
    ClearWal {
        respond_to: oneshot::Sender<Result<(), String>>,
    },

    Persist {
        respond_to: oneshot::Sender<Result<(), String>>,
    },

    // Introspection/meta

    /// Get statistics about the database or workspace.
    ///
    /// # Response
    /// - Sends `Ok(String)` containing stats info, or `Err(String)` on error.
    Stats {
        respond_to: oneshot::Sender<Result<String, String>>,
    },

    /// Get general information about the database or workspace.
    ///
    /// # Response
    /// - Sends `Ok(String)` containing info, or `Err(String)` on error.
    Info {
        respond_to: oneshot::Sender<Result<String, String>>,
    },

    // Transaction support (optional)

    /// Begin a new transaction.
    ///
    /// # Response
    /// - Sends `Ok(())` if transaction begins, or `Err(String)` on error.
    Begin {
        respond_to: oneshot::Sender<Result<(), String>>,
    },

    /// Commit the current transaction.
    ///
    /// # Response
    /// - Sends `Ok(())` if commit is successful, or `Err(String)` on error.
    Commit {
        respond_to: oneshot::Sender<Result<(), String>>,
    },

    /// Rollback the current transaction.
    ///
    /// # Response
    /// - Sends `Ok(())` if rollback is successful, or `Err(String)` on error.
    Rollback {
        respond_to: oneshot::Sender<Result<(), String>>,
    },

    // User/session

    /// Terminates the current user connection gracefully.
    ///
    /// # Response
    /// - Sends `Ok(())` if the connection is successfully terminated, or `Err(String)` on error.
    Exit {
        user_id: UserId,
        respond_to: oneshot::Sender<Result<(), String>>,
    },
}
